{"version":3,"sources":["App.module.css","constants.tsx","util.tsx","components/PlaygroundCanvas/PlaygroundCanvas.tsx","redux/actionTypes.tsx","redux/actions/playgroundActions/playgroundActions.tsx","redux/actions/timerActions/timerActions.tsx","redux/actions/scoreActions/scoreActions.tsx","containers/Playground/Playground.tsx","components/ScoreBoard/ScoreBoard.tsx","containers/Score/Score.tsx","components/NextBoard/NextBoard.tsx","containers/Next/Next.tsx","App.tsx","redux/reducers/playgroundReducer.tsx","redux/reducers/scoreReducer.tsx","redux/reducers/timerReducer.tsx","redux/reducers/rootReducer.tsx","index.tsx","components/ScoreBoard/ScoreBoard.module.css"],"names":["module","exports","PIECE_TYPE","PIECE_SIZE","Math","min","window","innerWidth","innerHeight","Constants","APP_NAME","PLAYGROUND_WIDTH","PLAYGROUND_HEIGHT","PLAYGROUND_TOPLEFT","PLAYGROUNDCANVAS_WIDTH","PLAYGROUNDCANVAS_HEIGHT","BlockState","PIECE_STATE","STICK","L","J","S","Z","SQUARE","PYRAMID","pieceGenerate","type","direction","piece","map","row","c","state","OCCUPIED","EMPTY","undefined","getColor","PlaygroundCanvas","props","playgroundRef","useRef","grid","useEffect","drawPiece","ctx","topLeft","i","j","strokeRect","save","fillStyle","fillRect","restore","canvas","current","getContext","clearRect","ref","width","height","ActionTypes","LOAD_GRID","GENERATE_PIECE","UPDATE_SCORE","UPDATE_LINE","TIMER_START","TIMER_INCREMENT","TIMER_STOP","loadPlayground","payload","stopTimer","updateScore","lineCleared","updateLine","isValidPosition","col","refillPieceBlock","STABLED","clearPieceBlock","canMoveTo","moveDown","Playground","useSelector","store","playground","timer","currentPieceQueue","pieceQueue","useState","pos","setPos","currentPiece","setCurrentPiece","currentTime","staleTime","setStaleTime","redrawTime","setRedrawTime","isDirectDown","setIsDirectDown","dispatch","useDispatch","timerInterval","setInterval","console","log","clearInterval","keyDownHandler","e","keyCode","newPos","firstRow","moveDownStable","moveLeft","newPiece","length","rotate","moveRight","addEventListener","removeEventListener","canMoveDown","canClear","canClearLine","shouldEndCurrentPieceCycle","stablize","r","Array","fill","tryClearLine","confirm","emptyGrid","error","Error","redraw","ScoreBoard","className","classes","Element","score","level","line","Score","floor","NextBoard","pieceGrid","Next","nextPiece","App","Panel","getRandomInt","max","random","getRandomPiece","newPieceType","getRandomType","newDirection","initialState","BPS_ScoringSystem","rootReducer","combineReducers","action","loadGridAction","JSON","parse","stringify","shift","scoreState","updateScoreAction","updateLineAction","timerState","createStore","ReactDOM","render","document","getElementById"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,MAAQ,qB,oGCgBrCC,E,4FAdNC,EAAaC,KAAKC,IAAwB,GAApBC,OAAOC,WAFV,GAEoE,GAArBD,OAAOE,YADrD,IAKbC,EAAY,CACrBC,SAAU,SACVC,iBARqB,GASrBC,kBARsB,GAStBC,mBAAoB,CAAC,EAAG,GACxBC,uBAXqB,GAGMX,EAAgC,GAS3DY,wBAXsB,GAGMZ,EAAiC,GAS7DA,WAAYA,I,SAGJD,K,cAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,MAAAA,E,gBAAAA,E,mBAAAA,M,KAUL,IAoCKc,EApCCC,EAAc,CACvBC,MAAO,CACH,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,IACzC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,KAE7CC,EAAG,CACC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,IACzC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,IACzC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,IACzC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,KAE7CC,EAAG,CACC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,IACzC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,IACzC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,IACzC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,KAE7CC,EAAG,CACC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,IACzC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,KAE7CC,EAAG,CACC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,IACzC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,KAE7CC,OAAQ,CACJ,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,KAE7CC,QAAS,CACL,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,IACzC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,IACzC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,IACzC,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,O,SAIrCR,O,iBAAAA,I,uBAAAA,I,sBAAAA,M,KC5DL,IAAMS,EAAgB,SAACC,EAAkBC,GAa5C,MAAO,CACHC,MAbUX,EAAYS,GAAMC,GACZE,KAAI,SAAAC,GACpB,OAAOA,EAAID,KAAI,SAAAE,GACX,OAAa,IAANA,EAAU,CACbC,MAAOhB,EAAWiB,SAClBP,KAAMA,GACN,CACAM,MAAOhB,EAAWkB,MAClBR,UAAMS,SAMdT,KAAMA,EACNC,UAAWA,IAINS,EAAW,SAACV,GACrB,OAAOA,GACH,KAAKxB,EAAWiB,EAAG,MAAO,MAC1B,KAAKjB,EAAWkB,EAAG,MAAO,SAC1B,KAAKlB,EAAWmB,EAAG,MAAO,SAC1B,KAAKnB,EAAWoB,EAAG,MAAO,QAC1B,KAAKpB,EAAWgB,MAAO,MAAO,OAC9B,KAAKhB,EAAWqB,OAAQ,MAAO,SAC/B,KAAKrB,EAAWsB,QAAS,MAAO,SAChC,QAAS,MAAO,UCkBTa,EA3CU,SAACC,GACtB,IAAMC,EAAgBC,iBAA0B,MAE1CC,EAAaH,EAAMG,KAiCzB,OA/BAC,qBAAU,WAEN,IAAMC,EAAY,SAACF,EAAYG,EAA+BC,EAAwBC,EAAWC,GAC1FN,EAAKK,GAAGC,GAAGf,QAAUhB,EAAWkB,MAC/BU,EAAII,WAAWH,EAAQ,GAAKE,EAAItC,EAAUN,WAAY0C,EAAQ,GAAKC,EAAIrC,EAAUN,WAAYM,EAAUN,WAAYM,EAAUN,aAG7HyC,EAAIK,OACJL,EAAIM,UAAYd,EAASK,EAAKK,GAAGC,GAAGrB,MACpCkB,EAAIO,SAASN,EAAQ,GAAKE,EAAItC,EAAUN,WAAY0C,EAAQ,GAAKC,EAAIrC,EAAUN,WAAYM,EAAUN,WAAYM,EAAUN,YAC3HyC,EAAIQ,YAIRC,EAASd,EAAce,QAC3B,GAAID,EAAQ,CACR,IAAIT,EAAMS,EAAOE,WAAW,MAEtBV,EAAUpC,EAAUI,mBAE1B,GAAG+B,EAAK,CACJA,EAAIY,UAAUX,EAAQ,GAAIA,EAAQ,GAAIpC,EAAUK,uBAAwBL,EAAUM,yBAClF,IAAI,IAAI+B,EAAI,EAAGA,EAAIrC,EAAUG,kBAAmBkC,IAC5C,IAAI,IAAIC,EAAI,EAAGA,EAAItC,EAAUE,iBAAkBoC,IAC3CJ,EAAUF,EAAMG,EAAKC,EAASC,EAAGC,OAKlD,CAACN,IAGA,4BAAQgB,IAAKlB,EAAemB,MAAOjD,EAAUK,uBAAwB6C,OAAQlD,EAAUM,yBAAvF,4DChCO6C,EAZK,CAChBC,UAAW,YACXC,eAAgB,iBAEhBC,aAAc,eACdC,YAAa,cAEbC,YAAa,cACbC,gBAAiB,kBACjBC,WAAY,cCLHC,EAAiB,SAAC3B,GAC3B,MAAO,CACHf,KAAMkC,EAAYC,UAClBQ,QAAS5B,ICQJ6B,EAAY,WACrB,MAAO,CACH5C,KAAMkC,EAAYO,aCdbI,EAAc,SAACC,GACxB,MAAO,CACH9C,KAAMkC,EAAYG,aAClBM,QAAS,CACLG,YAAaA,KAKZC,EAAa,SAACD,GACvB,MAAO,CACH9C,KAAMkC,EAAYI,YAClBK,QAAS,CACLG,YAAaA,KCJnBE,EAAkB,SAAC5C,EAAa6C,GAClC,QAAG7C,EAAM,GAAKA,GAAQrB,EAAUG,mBAAqB+D,EAAM,GAAKA,GAAOlE,EAAUE,mBAmE/EiE,EAAmB,SAACnC,EAAYX,EAAa6C,EAAa/C,IAlDxC,SAACa,GACrB,IAAI,IAAIK,EAAI,EAAGA,EAAIrC,EAAUG,kBAAmBkC,IAC5C,IAAI,IAAIC,EAAI,EAAGA,EAAItC,EAAUE,iBAAkBoC,IACxCN,EAAKK,GAAGC,GAAGf,QAAUhB,EAAW6D,UAC/BpC,EAAKK,GAAGC,GAAK,CACTf,MAAOhB,EAAWkB,MAClBR,UAAMS,IA6CtB2C,CAAgBrC,GAChB,IAAK,IAAIK,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IACf2B,EAAgB5C,EAAMgB,EAAG6B,EAAM5B,IAAMN,EAAKK,EAAIhB,GAAKiB,EAAI4B,GAAK3C,QAAUhB,EAAW6D,UACjFpC,EAAKK,EAAIhB,GAAKiB,EAAI4B,GAAlB,eAA8B/C,EAAMA,MAAMkB,GAAGC,MAMvDgC,EAAY,SAACtC,EAAYb,EAAcE,EAAa6C,GACtD,IAAI,IAAI7B,EAAI,EAAGA,EAAI,EAAGA,IAClB,IAAI,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAClB,GAAGnB,EAAMA,MAAMkB,GAAGC,GAAGf,QAAUhB,EAAWiB,SAAU,CAChD,IAAIyC,EAAgB5C,EAAMgB,EAAG6B,EAAM5B,GAC/B,OAAO,EAEX,GAAGN,EAAKX,EAAMgB,GAAG6B,EAAM5B,GAAGf,QAAUhB,EAAW6D,QAC3C,OAAO,EAMvB,OAAO,GAaLG,EAAW,SAACvC,EAAYb,EAAcE,EAAa6C,GACrD,OAAII,EAAUtC,EAAMb,EAAOE,EAAM,EAAG6C,IAIpCC,EAAiBnC,EAAMX,EAAM,EAAG6C,EAAK/C,GAE9B,CAACE,IAAKA,EAAM,EAAG6C,IAAKA,IALhB,MA2MAM,EAzJI,WACf,IAAIxC,EAAayC,aAAY,SAACC,GAAD,OAAsBA,EAAMC,WAAW3C,QAC9D4C,EAAQH,aAAY,SAACC,GAAD,OAAsBA,EAAME,SAChDC,EAAoBJ,aAAY,SAACC,GAAD,OAAsBA,EAAMC,WAAWG,cAHzD,EAKEC,mBAA+B,CAAC1D,IAAK,EAAG6C,IAAK,IAL/C,mBAKbc,EALa,KAKRC,EALQ,OAMoBF,mBAAgBF,EAAkB,IANtD,mBAMbK,EANa,KAMCC,EAND,OAOcJ,mBAAiBH,EAAMQ,aAPrC,mBAObC,EAPa,KAOFC,EAPE,OAQgBP,mBAAiB,GARjC,mBAQbQ,EARa,KAQDC,EARC,OASoBT,oBAAkB,GATtC,mBASbU,EATa,KASCC,EATD,KAWdC,EAAWC,cAyIjB,OAtIA3D,qBAAU,WACN,IAAM4D,EAAgBC,aAAY,kBAAMH,EF/KrC,CACH1E,KAAMkC,EAAYM,oBE8KkD,KAEpE,OAAO,WACHsC,QAAQC,IAAI,uBACZC,cAAcJ,MAEnB,CAACF,IAEJ1D,qBAAU,WACN,IAAMmD,EAAcR,EAAMQ,YACpBc,EAAiB,SAACC,GACpB,GAAGjB,GAAgBF,IAAQS,GAAgBT,EAAI3D,KAAO,EAAG,CACrD,OAAO8E,EAAEC,SACL,KAAK,GACD,IAAMC,EAzCP,SAACrE,EAAYb,EAAcE,EAAa6C,GAE3D,IADA,IAAIoC,EAAWjF,EACPgB,EAAIhB,EAAM,EAAGgB,EAAIrC,EAAUG,kBAAmBkC,IAClD,IAAIiC,EAAUtC,EAAMb,EAAOkB,EAAG6B,GAAM,CAChCoC,EAAWjE,EACX,MAIR,OADA8B,EAAiBnC,EAAMsE,EAAW,EAAGpC,EAAK/C,GACnC,CAACE,IAAKiF,EAAW,EAAGpC,IAAKA,GAgCGqC,CAAevE,EAAMkD,EAAcF,EAAI3D,IAAK2D,EAAId,KAC/De,EAAOoB,GACPX,GAAgB,GAChB,MAEJ,KAAK,GACD,IAAMW,EA7Eb,SAACrE,EAAYb,EAAcE,EAAa6C,GACrD,OAAII,EAAUtC,EAAMb,EAAOE,EAAK6C,EAAM,IAGtCC,EAAiBnC,EAAMX,EAAK6C,EAAM,EAAG/C,GAE9B,CAACE,IAAKA,EAAK6C,IAAKA,EAAM,IAJlB,CAAC7C,IAAKA,EAAK6C,IAAKA,GA2EQsC,CAASxE,EAAMkD,EAAcF,EAAI3D,IAAK2D,EAAId,KACzDe,EAAOoB,GACP,MAEJ,KAAK,GACD,IAAMI,EAhEf,SAACzE,EAAYb,EAAcE,EAAa6C,GACnD,IAAMhD,GAAaC,EAAMD,UAAY,GAAKV,EAAYW,EAAMF,MAAMyF,OAC5DxB,EAAelE,EAAcG,EAAMF,KAAMC,GAC/C,OAAIoD,EAAUtC,EAAMkD,EAAc7D,EAAK6C,IAInCC,EAAiBnC,EAAMX,EAAK6C,EAAKgB,GAC1BA,GAJA/D,EA4D0BwF,CAAO3E,EAAMkD,EAAcF,EAAI3D,IAAK2D,EAAId,KACzDiB,EAAgBsB,GAChB,MAEJ,KAAK,GACD,IAAMJ,EA9EZ,SAACrE,EAAYb,EAAcE,EAAa6C,GACtD,OAAII,EAAUtC,EAAMb,EAAOE,EAAK6C,EAAM,IAGtCC,EAAiBnC,EAAMX,EAAK6C,EAAM,EAAG/C,GAE9B,CAACE,IAAKA,EAAK6C,IAAKA,EAAM,IAJlB,CAAC7C,IAAKA,EAAK6C,IAAKA,GA4EQ0C,CAAU5E,EAAMkD,EAAcF,EAAI3D,IAAK2D,EAAId,KAC1De,EAAOoB,GACP,MAEJ,KAAK,GACD,IAAMA,EAAS9B,EAASvC,EAAMkD,EAAcF,EAAI3D,IAAK2D,EAAId,KACtDmC,GACCpB,EAAOoB,GAEX,MAEJ,QACIN,QAAQC,IAAR,kCAAuCG,IAI/CX,EAAcJ,GACdO,EAAShC,EAAe3B,SAGxB+D,QAAQC,IAAR,kCAAuCG,KAM/C,OAFAtG,OAAOgH,iBAAiB,UAAWX,GAE5B,WACHrG,OAAOiH,oBAAoB,UAAWZ,OAI9CjE,qBAAU,WACN,IAAMmD,EAAcR,EAAMQ,YA4B1B,GA1BmC,WAC/B,IAAIF,EACA,OAAO,EAGX,GAAIE,EAAcC,IAAe,GAC7B,OAAO,EAGX,GAAGI,EAEC,OADAC,GAAgB,IACT,EAGX,IAAMqB,EAAczC,EAAUtC,EAAMkD,EAAcF,EAAI3D,IAAM,EAAG2D,EAAId,KACnE,QAAI6C,IA7NK,SAAC/E,GAClB,IAAI,IAAIK,EAAI,EAAGA,EAAIL,EAAK0E,OAAQrE,IAAK,CAEjC,IADA,IAAI2E,GAAW,EACP1E,EAAI,EAAGA,EAAIN,EAAKK,GAAGqE,OAAQpE,IAC5BN,EAAKK,GAAGC,GAAGf,QAAUhB,EAAWkB,QAC/BuF,GAAW,GAGnB,GAAGA,EACC,OAAO,GAoNYC,CAAajF,MAI5B+E,GAAgB3B,EAAcG,GAAe,EAOlD2B,GAA8B,EAvKxB,SAAClF,GACd,IAAI,IAAIK,EAAI,EAAGA,EAAIrC,EAAUG,kBAAmBkC,IAC5C,IAAI,IAAIC,EAAI,EAAGA,EAAItC,EAAUE,iBAAkBoC,IACxCN,EAAKK,GAAGC,GAAGf,QAAUhB,EAAWiB,WAC/BQ,EAAKK,GAAGC,GAAGf,MAAQhB,EAAW6D,SAoKlC+C,CAASnF,GACT,IAAM+B,EA5NG,SAAC/B,GAElB,IADA,IAAI+B,EAAc,EACV1B,EAAI,EAAGA,EAAIL,EAAK0E,OAAQrE,IAAK,CAEjC,IADA,IAAI2E,GAAW,EACP1E,EAAI,EAAGA,EAAIN,EAAKK,GAAGqE,OAAQpE,IAC5BN,EAAKK,GAAGC,GAAGf,QAAUhB,EAAWkB,QAC/BuF,GAAW,GAGnB,GAAGA,EAAU,CACT,IAAI,IAAII,EAAI/E,EAAG+E,EAAI,EAAGA,IAClBpF,EAAKoF,GAAL,YAAcpF,EAAKoF,EAAI,IAE3BpF,EAAK,GAAK,IAAIqF,MAAMrH,EAAUE,kBAAkBoH,KAAK,CACjD/F,MAAOhB,EAAWkB,MAClBR,UAAMS,IAEVqC,KAGR,OAAOA,EAwMqBwD,CAAavF,GAC9B+B,EAAc,IACb4B,EAAS3B,EAAWD,IACpB4B,EAAS7B,EAAYC,KAEzB4B,EH9QD,CACH1E,KAAMkC,EAAYE,iBG+Qd,IAAMoD,EAAW5B,EAAkB,GAC/BP,EAAUtC,EAAMyE,EAAU,EAAG,KAC1B5G,OAAO2H,QAAQ,gBA3QhB,SAACxF,GACf,IAAI,IAAIK,EAAI,EAAGA,EAAIrC,EAAUG,kBAAmBkC,IAC5C,IAAI,IAAIC,EAAI,EAAGA,EAAItC,EAAUE,iBAAkBoC,IAC3CN,EAAKK,GAAGC,GAAK,CACTf,MAAOhB,EAAWkB,MAClBR,UAAMS,GAuQF+F,CAAUzF,GACV2D,EAAShC,EAAe3B,IACxB2D,EAAS9B,KACT8B,EAAS3B,GAAYhE,EAAUE,mBAC/ByF,EAAS7B,GAAa9D,EAAUE,oBAGhCyF,EAAS9B,MAGjBsB,EAAgBsB,GAChBxB,EAAO,CAAC5D,IAAK,EAAG6C,IAAK,IACrBoB,EAAaF,OAGZ,CACD,IAAIF,EAEA,MADAa,QAAQ2B,MAAM,sCACRC,MAAM,sCAGhB,IAAMtB,EAAS9B,EAASvC,EAAMkD,EAAcF,EAAI3D,IAAK2D,EAAId,KACtDmC,GACCpB,EAAOoB,GAIfV,EAAShC,EAAe3B,MAEzB,CAAC4C,EAAOe,IAGP,kBAAC,EAAD,CAAkB3D,KAAMA,EAAM4F,OAAQrC,K,gBChT/BsC,EAVI,SAAChG,GAChB,OACI,yBAAKiG,UAAWC,IAAQF,YACpB,yBAAKC,UAAWC,IAAQC,SAAxB,UAAyCnG,EAAMoG,OAC/C,yBAAKH,UAAWC,IAAQC,SAAxB,UAAyCnG,EAAMqG,OAC/C,yBAAKJ,UAAWC,IAAQC,SAAxB,SAAwCnG,EAAMsG,QCK3CC,EATD,WACV,IAAMH,EAAQxD,aAAY,SAACC,GAAD,OAAsBA,EAAMuD,MAAMA,SACtDE,EAAO1D,aAAY,SAACC,GAAD,OAAsBA,EAAMuD,MAAME,QAE3D,OACI,kBAAC,EAAD,CAAYF,MAAOA,EAAOC,MAAOvI,KAAK0I,MAAMF,EAAO,IAAM,EAAGA,KAAMA,KC8C3DG,EAlDG,SAACzG,GACf,IAAMmB,EAAMjB,iBAA0B,MAChCZ,EAAQU,EAAMV,MAqCpB,OAnCAc,qBAAU,WAEN,IAAMC,EAAY,SAACF,EAAYG,EAA+BE,EAAWC,GAClEN,EAAKK,GAAGC,GAAGf,QAAUhB,EAAWkB,OAC/BU,EAAIK,OACJL,EAAIM,UAAY,kBAChBN,EAAIO,SAASJ,EAAItC,EAAUN,WAAY2C,EAAIrC,EAAUN,WAAYM,EAAUN,WAAYM,EAAUN,YACjGyC,EAAIQ,YAGJR,EAAIK,OACJL,EAAIM,UAAYd,EAASK,EAAKK,GAAGC,GAAGrB,MACpCkB,EAAIO,SAASJ,EAAItC,EAAUN,WAAY2C,EAAIrC,EAAUN,WAAYM,EAAUN,WAAYM,EAAUN,YACjGyC,EAAIQ,YAIZ,GAAGxB,EAAO,CACN,IAAMoH,EAAYpH,EAAMA,MACpByB,EAASI,EAAIH,QACjB,GAAID,EAAQ,CACR,IAAIT,EAAMS,EAAOE,WAAW,MAE5B,GAAGX,EAAK,CACJA,EAAIY,UAAU,EAAG,EAAGH,EAAOK,MAAOL,EAAOM,QACzC,IAAI,IAAIb,EAAI,EAAGA,EAAI,EAAGA,IAClB,IAAI,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAClBJ,EAAUqG,EAAWpG,EAAKE,EAAGC,QAMlD,CAACnB,IAGA,6BACI,oCACA,6BACA,4BAAQ6B,IAAKA,EAAKC,MAA8B,EAAvBjD,EAAUN,WAAgBwD,OAA+B,EAAvBlD,EAAUN,YAArE,6DCrCG8I,EARF,WACT,IAAM1D,EAAaL,aAAY,SAACC,GAAD,OAAsBA,EAAMC,WAAWG,cAChE2D,EAAY3D,EAAW4B,OAAS,EAAI5B,EAAW,GAAK,KAC1D,OACI,kBAAC,EAAD,CAAW3D,MAAOsH,KCUXC,MAZf,WACE,OACE,yBAAKZ,UAAWC,IAAQW,KACtB,kBAAC,EAAD,MACH,yBAAKZ,UAAWC,IAAQY,OACzB,kBAAC,EAAD,MACA,kBAAC,EAAD,SCPIC,EAAe,SAACC,GAClB,OAAOlJ,KAAK0I,MAAM1I,KAAKmJ,SAAWnJ,KAAK0I,MAAMQ,KAqB3CE,EAAiB,WACnB,IAAMC,EAnBY,WAElB,OADYJ,EAAa,IAErB,KAAK,EAAG,OAAOnJ,EAAWiB,EAC1B,KAAK,EAAG,OAAOjB,EAAWkB,EAC1B,KAAK,EAAG,OAAOlB,EAAWmB,EAC1B,KAAK,EAAG,OAAOnB,EAAWoB,EAC1B,KAAK,EAAG,OAAOpB,EAAWgB,MAC1B,KAAK,EAAG,OAAOhB,EAAWqB,OAC1B,KAAK,EAAG,OAAOrB,EAAWsB,QAC1B,QAAS,OAAOtB,EAAWiB,GASVuI,GACfC,EALCN,EAAapI,EAKoBwI,GALFtC,QAMtC,OAAO1F,EAAcgI,EAAcE,IAGjCC,EAAqC,CACvCnH,KAAM,IAAIqF,MAAMrH,EAAUG,mBAAmBmH,KAAK,GAAGlG,KAAI,SAAAE,GAAC,OAAI,IAAI+F,MAAMrH,EAAUE,kBAAkBoH,KAAK,CACrG/F,MAAOhB,EAAWkB,MAClBR,UAAMS,OAEVoD,WAAY,CAACiE,IAAkBA,MCnC7BI,EAA2B,CAC7BlB,MAAO,EACPE,KAAM,GAGJiB,EAAoB,SAACrF,GACvB,OAAmB,IAAhBA,EACQ,GAEa,IAAhBA,EACG,IAEa,IAAhBA,EACG,IAEa,IAAhBA,EACG,KAEJ,GClBLoF,EAA2B,CAC7B/D,YAAa,GCAJiE,EAAcC,YAAgB,CACvC3E,WHoC6B,WAAiG,IAAhGpD,EAA+F,uDAAjE4H,EAAcI,EAAmD,uCAC7H,OAAOA,EAAOtI,MACV,KAAKkC,EAAYC,UACb,IAAMoG,EAAiBD,EACvB,OAAO,2BACAhI,GADP,IAEIS,KAAMyH,KAAKC,MAAMD,KAAKE,UAAUH,EAAe5F,YAGvD,KAAKT,EAAYE,eACb,IAAMoD,EAAWsC,IACdxH,EAAMuD,WAAW4B,OAAS,GACzBnF,EAAMuD,WAAW8E,QAErB,IAAM9E,EAAU,sBAAOvD,EAAMuD,YAAb,CAAyB2B,IACzC,OAAO,2BACAlF,GADP,IAEIuD,WAAYA,IAGpB,QACI,OAAOvD,IGxDf0G,MFkBwB,WAA8E,IAA7E4B,EAA4E,uDAAnDV,EAAcI,EAAqC,uCACrG,OAAOA,EAAOtI,MACV,KAAKkC,EAAYG,aACb,IAAMwG,EAAoBP,EAC1B,OAAGO,EAAkBlG,QAAQG,YAAc,EAChCoF,EAGA,2BACAU,GADP,IAEI5B,MAAO4B,EAAW5B,MAAQmB,EAAkBU,EAAkBlG,QAAQG,eAIlF,KAAKZ,EAAYI,YACb,IAAMwG,EAAmBR,EACzB,OAAGQ,EAAiBnG,QAAQG,YAAc,EAC/BoF,EAGA,2BACAU,GADP,IAEI1B,KAAM0B,EAAW1B,KAAO4B,EAAiBnG,QAAQG,cAI7D,QACI,OAAO8F,IE5CfjF,MDAwB,WAA8E,IAA7EoF,EAA4E,uDAAnDb,EAAcI,EAAqC,uCACrG,OAAOA,EAAOtI,MACV,KAAKkC,EAAYK,YACb,MAAO,CACH4B,YAAa,GAErB,KAAKjC,EAAYM,gBACb,MAAO,CACH2B,YAAa4E,EAAW5E,YAAc,GAE9C,KAAKjC,EAAYO,WACb,MAAO,CACH0B,aAAc,GAEtB,QACI,OAAO4E,MEbbtF,EAAQuF,YAAYZ,GAE1Ba,IAASC,OACP,kBAAC,IAAD,CAAUzF,MAAOA,GACf,kBAAC,EAAD,OAEF0F,SAASC,eAAe,U,kBCf1B9K,EAAOC,QAAU,CAAC,WAAa,+BAA+B,QAAU,+B","file":"static/js/main.ec5311ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__msOkL\",\"Panel\":\"App_Panel__2ZHDO\"};","\r\nconst PLAYGROUND_WIDTH = 10;\r\nconst PLAYGROUND_HEIGHT = 22;\r\nconst PIECE_SIZE = Math.min(window.innerWidth * 0.6 / PLAYGROUND_WIDTH, window.innerHeight * 0.8 / PLAYGROUND_HEIGHT);\r\nconst PLAYGROUNDCANVAS_WIDTH = PIECE_SIZE * PLAYGROUND_WIDTH + 10;\r\nconst PLAYGROUNDCANVAS_HEIGHT = PIECE_SIZE * PLAYGROUND_HEIGHT + 10;\r\n\r\nexport const Constants = {\r\n    APP_NAME: 'Tetrix',\r\n    PLAYGROUND_WIDTH: PLAYGROUND_WIDTH,\r\n    PLAYGROUND_HEIGHT: PLAYGROUND_HEIGHT,\r\n    PLAYGROUND_TOPLEFT: [0, 0],\r\n    PLAYGROUNDCANVAS_WIDTH: PLAYGROUNDCANVAS_WIDTH,\r\n    PLAYGROUNDCANVAS_HEIGHT: PLAYGROUNDCANVAS_HEIGHT,\r\n    PIECE_SIZE: PIECE_SIZE,\r\n}\r\n\r\nexport enum PIECE_TYPE {\r\n    STICK = 'STICK',\r\n    L = 'L',\r\n    J = 'J',\r\n    S = 'S',\r\n    Z = 'Z',\r\n    SQUARE = 'SQUARE',\r\n    PYRAMID = 'PYRAMID'\r\n}\r\n\r\nexport const PIECE_STATE = {\r\n    STICK: [\r\n        [[0,0,0,0], [0,0,0,0], [1,1,1,1], [0,0,0,0]],\r\n        [[0,1,0,0], [0,1,0,0], [0,1,0,0], [0,1,0,0]]\r\n    ],\r\n    L: [\r\n        [[0,1,0,0], [0,1,0,0], [0,1,1,0], [0,0,0,0]],\r\n        [[0,0,0,0], [0,0,1,0], [1,1,1,0], [0,0,0,0]],\r\n        [[0,1,1,0], [0,0,1,0], [0,0,1,0], [0,0,0,0]],\r\n        [[0,0,0,0], [1,1,1,0], [1,0,0,0], [0,0,0,0]]\r\n    ],\r\n    J: [\r\n        [[0,0,1,0], [0,0,1,0], [0,1,1,0], [0,0,0,0]],\r\n        [[0,0,0,0], [1,1,1,0], [0,0,1,0], [0,0,0,0]],\r\n        [[0,1,1,0], [0,1,0,0], [0,1,0,0], [0,0,0,0]],\r\n        [[0,0,0,0], [1,0,0,0], [1,1,1,0], [0,0,0,0]]\r\n    ],\r\n    S: [\r\n        [[0,0,0,0], [0,1,1,0], [1,1,0,0], [0,0,0,0]],\r\n        [[0,1,0,0], [0,1,1,0], [0,0,1,0], [0,0,0,0]]\r\n    ],\r\n    Z: [\r\n        [[0,0,0,0], [1,1,0,0], [0,1,1,0], [0,0,0,0]],\r\n        [[0,0,1,0], [0,1,1,0], [0,1,0,0], [0,0,0,0]]\r\n    ],\r\n    SQUARE: [\r\n        [[0,0,0,0], [0,1,1,0], [0,1,1,0], [0,0,0,0]]\r\n    ],\r\n    PYRAMID: [\r\n        [[0,1,0,0], [1,1,1,0], [0,0,0,0], [0,0,0,0]],\r\n        [[0,1,0,0], [1,1,0,0], [0,1,0,0], [0,0,0,0]],\r\n        [[0,0,0,0], [1,1,1,0], [0,1,0,0], [0,0,0,0]],\r\n        [[0,1,0,0], [0,1,1,0], [0,1,0,0], [0,0,0,0]]\r\n    ]\r\n}\r\n\r\nexport enum BlockState {\r\n    EMPTY = 0,\r\n    OCCUPIED = 1,\r\n    STABLED = 2\r\n}","import { PIECE_TYPE, PIECE_STATE, BlockState } from \"./constants\";\r\nimport { Piece } from \"./containers/Playground/Playground.interface\";\r\n\r\nexport const pieceGenerate = (type: PIECE_TYPE, direction: number): Piece => {\r\n    const model = PIECE_STATE[type][direction];\r\n    const piece = model.map(row => {\r\n        return row.map(c => {\r\n            return c === 1 ? {\r\n                state: BlockState.OCCUPIED,\r\n                type: type\r\n            } : {\r\n                state: BlockState.EMPTY,\r\n                type: undefined\r\n            };\r\n        })\r\n    });\r\n    return {\r\n        piece: piece,\r\n        type: type,\r\n        direction: direction\r\n    }\r\n}\r\n\r\nexport const getColor = (type: PIECE_TYPE | undefined) => {\r\n    switch(type) {\r\n        case PIECE_TYPE.L: return 'red';\r\n        case PIECE_TYPE.J: return 'orange';\r\n        case PIECE_TYPE.S: return 'yellow';\r\n        case PIECE_TYPE.Z: return 'green';\r\n        case PIECE_TYPE.STICK: return 'blue';\r\n        case PIECE_TYPE.SQUARE: return 'indigo';\r\n        case PIECE_TYPE.PYRAMID: return 'violet';\r\n        default: return 'white';\r\n    }\r\n}","import React, { useRef, useEffect } from 'react';\r\n\r\nimport { PlaygroundCanvasProps } from './PlaygroundCanvas.interface';\r\nimport { Constants, BlockState } from '../../constants';\r\nimport { Grid } from '../../containers/Playground/Playground.interface';\r\nimport { getColor } from '../../util';\r\n\r\nconst PlaygroundCanvas = (props: PlaygroundCanvasProps) => {\r\n    const playgroundRef = useRef<HTMLCanvasElement>(null);\r\n\r\n    const grid: Grid = props.grid;\r\n\r\n    useEffect(() => {\r\n\r\n        const drawPiece = (grid: Grid, ctx: CanvasRenderingContext2D, topLeft: Array<number>, i: number, j: number) => {\r\n            if(grid[i][j].state === BlockState.EMPTY) {\r\n                ctx.strokeRect(topLeft[1] + j * Constants.PIECE_SIZE, topLeft[0] + i * Constants.PIECE_SIZE, Constants.PIECE_SIZE, Constants.PIECE_SIZE);\r\n            }\r\n            else {\r\n                ctx.save();\r\n                ctx.fillStyle = getColor(grid[i][j].type);\r\n                ctx.fillRect(topLeft[1] + j * Constants.PIECE_SIZE, topLeft[0] + i * Constants.PIECE_SIZE, Constants.PIECE_SIZE, Constants.PIECE_SIZE);\r\n                ctx.restore();\r\n            }\r\n        }\r\n        \r\n        var canvas = playgroundRef.current;\r\n        if (canvas) {\r\n            var ctx = canvas.getContext('2d');\r\n\r\n            const topLeft = Constants.PLAYGROUND_TOPLEFT;\r\n\r\n            if(ctx) {\r\n                ctx.clearRect(topLeft[0], topLeft[1], Constants.PLAYGROUNDCANVAS_WIDTH, Constants.PLAYGROUNDCANVAS_HEIGHT);\r\n                for(let i = 2; i < Constants.PLAYGROUND_HEIGHT; i++) {\r\n                    for(let j = 0; j < Constants.PLAYGROUND_WIDTH; j++) {\r\n                        drawPiece(grid, ctx, topLeft, i, j);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [grid]);\r\n\r\n    return (\r\n        <canvas ref={playgroundRef} width={Constants.PLAYGROUNDCANVAS_WIDTH} height={Constants.PLAYGROUNDCANVAS_HEIGHT}>\r\n            Please use a newer verison of browser to play the game.\r\n        </canvas>\r\n    )\r\n}\r\n\r\nexport default PlaygroundCanvas;","const ActionTypes = {\r\n    LOAD_GRID: 'LOAD_GRID',\r\n    GENERATE_PIECE: 'GENERATE_PIECE',\r\n\r\n    UPDATE_SCORE: 'UPDATE_SCORE',\r\n    UPDATE_LINE: 'UPDATE_LINE',\r\n\r\n    TIMER_START: 'TIMER_START',\r\n    TIMER_INCREMENT: 'TIMER_INCREMENT',\r\n    TIMER_STOP: 'TIMER_STOP'\r\n}\r\n\r\nexport default ActionTypes;","import { Grid } from \"../../../containers/Playground/Playground.interface\";\r\nimport ActionTypes from \"../../actionTypes\";\r\n\r\n\r\nexport const loadPlayground = (grid: Grid) => {\r\n    return {\r\n        type: ActionTypes.LOAD_GRID,\r\n        payload: grid\r\n    };\r\n}\r\n\r\nexport const generatePiece = () => {\r\n    return {\r\n        type: ActionTypes.GENERATE_PIECE\r\n    }\r\n}","import ActionTypes from \"../../actionTypes\";\r\nimport { TimerActions } from \"./timerActions.interface\";\r\n\r\nexport const startTimer = (): TimerActions => {\r\n    return {\r\n        type: ActionTypes.TIMER_START\r\n    }\r\n}\r\n\r\nexport const incrementTimer = (): TimerActions => {\r\n    return {\r\n        type: ActionTypes.TIMER_INCREMENT\r\n    }\r\n}\r\n\r\nexport const stopTimer = (): TimerActions => {\r\n    return {\r\n        type: ActionTypes.TIMER_STOP\r\n    }\r\n}","import { UpdateScoreAction, UpdateLineAction } from \"./scoreActions.interface\";\r\nimport ActionTypes from \"../../actionTypes\";\r\n\r\nexport const updateScore = (lineCleared: number): UpdateScoreAction => {\r\n    return {\r\n        type: ActionTypes.UPDATE_SCORE,\r\n        payload: {\r\n            lineCleared: lineCleared\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateLine = (lineCleared: number): UpdateLineAction => {\r\n    return {\r\n        type: ActionTypes.UPDATE_LINE,\r\n        payload: {\r\n            lineCleared: lineCleared\r\n        }\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { RootState } from '../../redux/reducers/rootReducer';\r\nimport PlaygroundCanvas from '../../components/PlaygroundCanvas/PlaygroundCanvas';\r\nimport { Grid, CurrentPiecePosition, Piece } from './Playground.interface';\r\nimport { Constants, PIECE_STATE, BlockState } from '../../constants';\r\nimport { pieceGenerate } from '../../util';\r\nimport { generatePiece, loadPlayground } from '../../redux/actions/playgroundActions/playgroundActions';\r\nimport { incrementTimer, stopTimer } from '../../redux/actions/timerActions/timerActions';\r\nimport { updateLine, updateScore } from '../../redux/actions/scoreActions/scoreActions';\r\n\r\nconst isValidPosition = (row: number, col: number) => {\r\n    if(row < 0 || row  >= Constants.PLAYGROUND_HEIGHT || col < 0 || col >= Constants.PLAYGROUND_WIDTH) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nconst emptyGrid = (grid: Grid) => {\r\n    for(let i = 0; i < Constants.PLAYGROUND_HEIGHT; i++) {\r\n        for(let j = 0; j < Constants.PLAYGROUND_WIDTH; j++) {\r\n            grid[i][j] = {\r\n                state: BlockState.EMPTY,\r\n                type: undefined\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst clearPieceBlock = (grid: Grid) => {\r\n    for(let i = 0; i < Constants.PLAYGROUND_HEIGHT; i++) {\r\n        for(let j = 0; j < Constants.PLAYGROUND_WIDTH; j++) {\r\n            if(grid[i][j].state !== BlockState.STABLED) {\r\n                grid[i][j] = {\r\n                    state: BlockState.EMPTY,\r\n                    type: undefined\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst canClearLine = (grid: Grid) => {\r\n    for(let i = 0; i < grid.length; i++) {\r\n        let canClear = true;\r\n        for(let j = 0; j < grid[i].length; j++) {\r\n            if(grid[i][j].state === BlockState.EMPTY) {\r\n                canClear = false;\r\n            }\r\n        }\r\n        if(canClear) {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\nconst tryClearLine = (grid: Grid): number => {\r\n    let lineCleared = 0;\r\n    for(let i = 0; i < grid.length; i++) {\r\n        let canClear = true;\r\n        for(let j = 0; j < grid[i].length; j++) {\r\n            if(grid[i][j].state === BlockState.EMPTY) {\r\n                canClear = false;\r\n            }\r\n        }\r\n        if(canClear) {\r\n            for(let r = i; r > 0; r--) {\r\n                grid[r] = [...grid[r - 1]];\r\n            }\r\n            grid[0] = new Array(Constants.PLAYGROUND_WIDTH).fill({\r\n                state: BlockState.EMPTY,\r\n                type: undefined\r\n            });\r\n            lineCleared++;\r\n        }\r\n    }\r\n    return lineCleared;\r\n}\r\n\r\nconst refillPieceBlock = (grid: Grid, row: number, col: number, piece: Piece) => {\r\n    clearPieceBlock(grid);\r\n    for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n            if (isValidPosition(row + i, col + j) && grid[i + row][j + col].state !== BlockState.STABLED) {\r\n                grid[i + row][j + col] = { ...piece.piece[i][j] };\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst canMoveTo = (grid: Grid, piece: Piece, row: number, col: number): boolean => {\r\n    for(let i = 0; i < 4; i++) {\r\n        for(let j = 0; j < 4; j++) {\r\n            if(piece.piece[i][j].state === BlockState.OCCUPIED) {\r\n                if(!isValidPosition(row + i, col + j)) {\r\n                    return false;\r\n                }\r\n                if(grid[row + i][col + j].state === BlockState.STABLED) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nconst stablize = (grid: Grid) => {\r\n    for(let i = 0; i < Constants.PLAYGROUND_HEIGHT; i++) {\r\n        for(let j = 0; j < Constants.PLAYGROUND_WIDTH; j++) {\r\n            if(grid[i][j].state === BlockState.OCCUPIED) {\r\n                grid[i][j].state = BlockState.STABLED;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst moveDown = (grid: Grid, piece: Piece, row: number, col: number): CurrentPiecePosition | null => {\r\n    if(!canMoveTo(grid, piece, row + 1, col)) {\r\n        return null;\r\n    }\r\n\r\n    refillPieceBlock(grid, row + 1, col, piece);\r\n\r\n    return {row: row + 1, col: col};\r\n}\r\n\r\nconst moveLeft = (grid: Grid, piece: Piece, row: number, col: number): CurrentPiecePosition => {\r\n    if(!canMoveTo(grid, piece, row, col - 1)) {\r\n        return {row: row, col: col};\r\n    }\r\n    refillPieceBlock(grid, row, col - 1, piece);\r\n\r\n    return {row: row, col: col - 1};\r\n}\r\n\r\nconst moveRight = (grid: Grid, piece: Piece, row: number, col: number): CurrentPiecePosition => {\r\n    if(!canMoveTo(grid, piece, row, col + 1)) {\r\n        return {row: row, col: col};\r\n    }\r\n    refillPieceBlock(grid, row, col + 1, piece);\r\n\r\n    return {row: row, col: col + 1};\r\n}\r\n\r\nconst rotate = (grid: Grid, piece: Piece, row: number, col: number): Piece => {\r\n    const direction = (piece.direction + 1) % PIECE_STATE[piece.type].length;\r\n    const currentPiece = pieceGenerate(piece.type, direction);\r\n    if(!canMoveTo(grid, currentPiece, row, col)) {\r\n        return piece;\r\n    }\r\n    else {\r\n        refillPieceBlock(grid, row, col, currentPiece);\r\n        return currentPiece;\r\n    }\r\n}\r\n\r\nconst moveDownStable = (grid: Grid, piece: Piece, row: number, col: number) => {\r\n    let firstRow = row;\r\n    for(let i = row + 1; i < Constants.PLAYGROUND_HEIGHT; i++) {\r\n        if(!canMoveTo(grid, piece, i, col)) {\r\n            firstRow = i;\r\n            break;\r\n        }\r\n    }\r\n    refillPieceBlock(grid, firstRow - 1, col, piece);\r\n    return {row: firstRow - 1, col: col};\r\n}\r\n\r\nconst Playground = ()=> {\r\n    let grid: Grid = useSelector((store: RootState) => store.playground.grid);    \r\n    const timer = useSelector((store: RootState) => store.timer);\r\n    const currentPieceQueue = useSelector((store: RootState) => store.playground.pieceQueue);\r\n    \r\n    const [pos, setPos] = useState<CurrentPiecePosition>({row: 0, col: 3});\r\n    const [currentPiece, setCurrentPiece] = useState<Piece>(currentPieceQueue[0]);\r\n    const [staleTime, setStaleTime] = useState<number>(timer.currentTime);\r\n    const [redrawTime, setRedrawTime] = useState<number>(0);\r\n    const [isDirectDown, setIsDirectDown] = useState<boolean>(false);\r\n    \r\n    const dispatch = useDispatch();\r\n\r\n  \r\n    useEffect(() => {\r\n        const timerInterval = setInterval(() => dispatch(incrementTimer()), 1000);\r\n\r\n        return () => {\r\n            console.log('clear side effects.');\r\n            clearInterval(timerInterval);\r\n        }\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        const currentTime = timer.currentTime;\r\n        const keyDownHandler = (e: KeyboardEvent) => {\r\n            if(currentPiece && pos && !isDirectDown && pos.row >= 1) {\r\n                switch(e.keyCode) {\r\n                    case 32: {\r\n                        const newPos = moveDownStable(grid, currentPiece, pos.row, pos.col);\r\n                        setPos(newPos);\r\n                        setIsDirectDown(true);\r\n                        break;\r\n                    }\r\n                    case 37: {\r\n                        const newPos = moveLeft(grid, currentPiece, pos.row, pos.col);\r\n                        setPos(newPos);\r\n                        break;\r\n                    }\r\n                    case 38: {\r\n                        const newPiece = rotate(grid, currentPiece, pos.row, pos.col);\r\n                        setCurrentPiece(newPiece);\r\n                        break;\r\n                    }\r\n                    case 39: {\r\n                        const newPos = moveRight(grid, currentPiece, pos.row, pos.col);\r\n                        setPos(newPos);\r\n                        break;\r\n                    }\r\n                    case 40: {\r\n                        const newPos = moveDown(grid, currentPiece, pos.row, pos.col);\r\n                        if(newPos) {\r\n                            setPos(newPos);\r\n                        }\r\n                        break;\r\n                    }\r\n                    default: {\r\n                        console.log(`Invalid keyboard event: ${e}`);\r\n                        break;\r\n                    }\r\n                }\r\n                setRedrawTime(currentTime);\r\n                dispatch(loadPlayground(grid));\r\n            }\r\n            else {\r\n                console.log(`Invalid keyboard event: ${e}`);\r\n            }\r\n        }\r\n\r\n        window.addEventListener('keydown', keyDownHandler);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', keyDownHandler);\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        const currentTime = timer.currentTime;\r\n\r\n        const shouldEndCurrentPieceCycle = () => {\r\n            if(!currentPiece) {\r\n                return true;\r\n            }\r\n            \r\n            if((currentTime - staleTime) === 25) {\r\n                return true;\r\n            }\r\n\r\n            if(isDirectDown) {\r\n                setIsDirectDown(false);\r\n                return true;\r\n            }\r\n            \r\n            const canMoveDown = canMoveTo(grid, currentPiece, pos.row + 1, pos.col);\r\n            if(!canMoveDown && canClearLine(grid)) {\r\n                return true;\r\n            }\r\n\r\n            if(!canMoveDown && (currentTime - redrawTime) >= 1) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        if(shouldEndCurrentPieceCycle()) {\r\n            stablize(grid);\r\n            const lineCleared = tryClearLine(grid);\r\n            if(lineCleared > 0) {\r\n                dispatch(updateLine(lineCleared));\r\n                dispatch(updateScore(lineCleared));\r\n            }\r\n            dispatch(generatePiece());\r\n            \r\n            const newPiece = currentPieceQueue[0];\r\n            if(!canMoveTo(grid, newPiece, 0, 3)) {\r\n                if(window.confirm('Game Over!')) {\r\n                    emptyGrid(grid);\r\n                    dispatch(loadPlayground(grid));\r\n                    dispatch(stopTimer());\r\n                    dispatch(updateLine(-Constants.PLAYGROUND_WIDTH));\r\n                    dispatch(updateScore(-Constants.PLAYGROUND_WIDTH));\r\n                }\r\n                else {\r\n                    dispatch(stopTimer());\r\n                }\r\n            }\r\n            setCurrentPiece(newPiece);\r\n            setPos({row: 0, col: 3});\r\n            setStaleTime(currentTime);\r\n\r\n        }\r\n        else {\r\n            if(!currentPiece) {\r\n                console.error('currentPiece is null or undefined!');\r\n                throw Error('currentPiece is null or undefined!');\r\n            }\r\n\r\n            const newPos = moveDown(grid, currentPiece, pos.row, pos.col);\r\n            if(newPos) {\r\n                setPos(newPos);\r\n            }\r\n        }\r\n\r\n        dispatch(loadPlayground(grid));\r\n        \r\n    }, [timer, dispatch]);\r\n\r\n    return (\r\n        <PlaygroundCanvas grid={grid} redraw={redrawTime} />\r\n    )\r\n}\r\n\r\nexport default Playground;\r\n","import React from 'react'\r\n\r\nimport { ScoreBoardProps } from './ScoreBoard.interface';\r\nimport classes from './ScoreBoard.module.css';\r\n\r\nconst ScoreBoard = (props: ScoreBoardProps) => {\r\n    return (\r\n        <div className={classes.ScoreBoard}>\r\n            <div className={classes.Element}>Score: {props.score}</div>\r\n            <div className={classes.Element}>Level: {props.level}</div>\r\n            <div className={classes.Element}>Line: {props.line}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreBoard;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { RootState } from '../../redux/reducers/rootReducer';\r\nimport ScoreBoard from '../../components/ScoreBoard/ScoreBoard';\r\n\r\nconst Score = () => {\r\n    const score = useSelector((store: RootState) => store.score.score);\r\n    const line = useSelector((store: RootState) => store.score.line);\r\n\r\n    return (\r\n        <ScoreBoard score={score} level={Math.floor(line / 10) + 1} line={line} />\r\n    )\r\n}\r\n\r\nexport default Score;","import React, { useRef, useEffect } from 'react';\r\n\r\nimport { NextBoardProps } from './NextBoard.interface';\r\nimport { Constants, BlockState } from '../../constants';\r\nimport { Grid } from '../../containers/Playground/Playground.interface';\r\nimport { getColor } from '../../util';\r\n\r\nconst NextBoard = (props: NextBoardProps) => {\r\n    const ref = useRef<HTMLCanvasElement>(null);\r\n    const piece = props.piece;\r\n\r\n    useEffect(() => {\r\n\r\n        const drawPiece = (grid: Grid, ctx: CanvasRenderingContext2D, i: number, j: number) => {\r\n            if(grid[i][j].state === BlockState.EMPTY) {\r\n                ctx.save();\r\n                ctx.fillStyle = 'rgb(0, 0, 0, 0)';\r\n                ctx.fillRect(j * Constants.PIECE_SIZE, i * Constants.PIECE_SIZE, Constants.PIECE_SIZE, Constants.PIECE_SIZE);\r\n                ctx.restore();\r\n            }\r\n            else {\r\n                ctx.save();\r\n                ctx.fillStyle = getColor(grid[i][j].type);\r\n                ctx.fillRect(j * Constants.PIECE_SIZE, i * Constants.PIECE_SIZE, Constants.PIECE_SIZE, Constants.PIECE_SIZE);\r\n                ctx.restore();\r\n            }\r\n        }\r\n\r\n        if(piece) {\r\n            const pieceGrid = piece.piece;\r\n            var canvas = ref.current;\r\n            if (canvas) {\r\n                var ctx = canvas.getContext('2d');\r\n\r\n                if(ctx) {\r\n                    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n                    for(let i = 0; i < 4; i++) {\r\n                        for(let j = 0; j < 4; j++) {\r\n                            drawPiece(pieceGrid, ctx, i, j);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [piece]);\r\n\r\n    return (\r\n        <div>\r\n            <p>Next:</p>\r\n            <br/>\r\n            <canvas ref={ref} width={Constants.PIECE_SIZE * 4} height={Constants.PIECE_SIZE * 4}>\r\n                Please use a newer verison of browser to play the game.\r\n            </canvas>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NextBoard;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/reducers/rootReducer';\r\nimport NextBoard from '../../components/NextBoard/NextBoard';\r\n\r\nconst Next = () => {\r\n    const pieceQueue = useSelector((store: RootState) => store.playground.pieceQueue);\r\n    const nextPiece = pieceQueue.length > 1 ? pieceQueue[1] : null;\r\n    return (\r\n        <NextBoard piece={nextPiece} />\r\n    )\r\n}\r\n\r\nexport default Next;","import React from 'react';\r\n\r\nimport classes from './App.module.css';\r\nimport Playground from './containers/Playground/Playground';\r\nimport Score from './containers/Score/Score';\r\nimport Next from './containers/Next/Next';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className={classes.App}>\r\n      <Playground />\r\n\t  <div className={classes.Panel}>\r\n\t\t<Next />\r\n\t\t<Score />\r\n\t  </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { PlaygroundStoreState, Piece } from '../../containers/Playground/Playground.interface';\r\nimport { PlaygroundAction, LoadPlaygroundAction } from '../actions/playgroundActions/playgroundActions.interface';\r\nimport ActionTypes from '../actionTypes';\r\nimport { Constants, BlockState, PIECE_TYPE, PIECE_STATE } from '../../constants';\r\nimport { pieceGenerate } from '../../util';\r\n\r\nconst getRandomInt = (max: number) => {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nconst getRandomType = () => {\r\n    const num = getRandomInt(7);\r\n    switch(num) {\r\n        case 0: return PIECE_TYPE.L;\r\n        case 1: return PIECE_TYPE.J;\r\n        case 2: return PIECE_TYPE.S;\r\n        case 3: return PIECE_TYPE.Z;\r\n        case 4: return PIECE_TYPE.STICK;\r\n        case 5: return PIECE_TYPE.SQUARE;\r\n        case 6: return PIECE_TYPE.PYRAMID;\r\n        default: return PIECE_TYPE.L;\r\n    }\r\n}\r\n\r\nconst getRandomDirection = (type: PIECE_TYPE): number => {\r\n    return getRandomInt(PIECE_STATE[type].length);\r\n}\r\n\r\nconst getRandomPiece = (): Piece => {\r\n    const newPieceType = getRandomType();\r\n    const newDirection = getRandomDirection(newPieceType);\r\n    return pieceGenerate(newPieceType, newDirection);\r\n}\r\n\r\nconst initialState: PlaygroundStoreState = {\r\n    grid: new Array(Constants.PLAYGROUND_HEIGHT).fill(0).map(c => new Array(Constants.PLAYGROUND_WIDTH).fill({\r\n        state: BlockState.EMPTY,\r\n        type: undefined\r\n    })),\r\n    pieceQueue: [getRandomPiece(), getRandomPiece()]\r\n}\r\n\r\nexport const playgroundReducer = (state: PlaygroundStoreState = initialState, action: PlaygroundAction): PlaygroundStoreState => {\r\n    switch(action.type) {\r\n        case ActionTypes.LOAD_GRID: {\r\n            const loadGridAction = action as LoadPlaygroundAction;\r\n            return {\r\n                ...state,\r\n                grid: JSON.parse(JSON.stringify(loadGridAction.payload))\r\n            }\r\n        }\r\n        case ActionTypes.GENERATE_PIECE: {\r\n            const newPiece = getRandomPiece();\r\n            if(state.pieceQueue.length > 0) {\r\n                state.pieceQueue.shift();\r\n            }\r\n            const pieceQueue = [...state.pieceQueue, newPiece];\r\n            return {\r\n                ...state,\r\n                pieceQueue: pieceQueue\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","import { ScoreState } from \"../../containers/Score/Score.interface\"\r\nimport ActionTypes from \"../actionTypes\"\r\nimport { UpdateScoreAction, ScoreActions, UpdateLineAction } from \"../actions/scoreActions/scoreActions.interface\"\r\n\r\nconst initialState: ScoreState = {\r\n    score: 0,\r\n    line: 0\r\n}\r\n\r\nconst BPS_ScoringSystem = (lineCleared: number): number => {\r\n    if(lineCleared === 1) {\r\n        return 40;\r\n    }\r\n    else if(lineCleared === 2) {\r\n        return 100;\r\n    }\r\n    else if(lineCleared === 3) {\r\n        return 300;\r\n    }\r\n    else if(lineCleared === 4) {\r\n        return 1200;\r\n    }\r\n    return 0;\r\n}\r\n\r\nexport const scoreReducer = (scoreState: ScoreState = initialState, action: ScoreActions): ScoreState => {\r\n    switch(action.type) {\r\n        case ActionTypes.UPDATE_SCORE: {\r\n            const updateScoreAction = action as UpdateScoreAction;\r\n            if(updateScoreAction.payload.lineCleared < 0) {\r\n                return initialState;\r\n            }\r\n            else {\r\n                return {\r\n                    ...scoreState,\r\n                    score: scoreState.score + BPS_ScoringSystem(updateScoreAction.payload.lineCleared)\r\n                };\r\n            }\r\n        }\r\n        case ActionTypes.UPDATE_LINE: {\r\n            const updateLineAction = action as UpdateLineAction;\r\n            if(updateLineAction.payload.lineCleared < 0) {\r\n                return initialState;\r\n            }\r\n            else {\r\n                return {\r\n                    ...scoreState,\r\n                    line: scoreState.line + updateLineAction.payload.lineCleared\r\n                };\r\n            }\r\n        }\r\n        default: {\r\n            return scoreState;\r\n        }\r\n    }\r\n}","import ActionTypes from \"../actionTypes\"\r\nimport { TimerActions } from \"../actions/timerActions/timerActions.interface\";\r\nimport { TimerState } from \"../../containers/Playground/Timer.interface\";\r\n\r\nconst initialState: TimerState = {\r\n    currentTime: 0\r\n}\r\n\r\nexport const timerReducer = (timerState: TimerState = initialState, action: TimerActions): TimerState => {\r\n    switch(action.type) {\r\n        case ActionTypes.TIMER_START:\r\n            return {\r\n                currentTime: 0\r\n            };\r\n        case ActionTypes.TIMER_INCREMENT:\r\n            return {\r\n                currentTime: timerState.currentTime + 1\r\n            };\r\n        case ActionTypes.TIMER_STOP: \r\n            return {\r\n                currentTime: -1\r\n            };\r\n        default: {\r\n            return timerState;\r\n        }\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport { playgroundReducer } from './playgroundReducer';\r\nimport { scoreReducer } from './scoreReducer';\r\nimport { timerReducer } from './timerReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    playground: playgroundReducer,\r\n    score: scoreReducer,\r\n    timer: timerReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.module.css';\r\n\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport { rootReducer } from './redux/reducers/rootReducer';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ScoreBoard\":\"ScoreBoard_ScoreBoard__2gm-J\",\"Element\":\"ScoreBoard_Element__3Mhyx\"};"],"sourceRoot":""}